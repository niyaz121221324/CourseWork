@page "/users"
@inject IRepository<User> UserRepository

<div class="users-page">
    <header class="text-center">
        <h1 class="display-4">ðŸ‘¥ User Management</h1>
        <p class="lead">Manage system users effectively.</p>
        <hr class="my-4">
    </header>

    <div class="container">
        <div class="row">
            <div class="col-md-12">
                <h3 class="text-center mb-4">User List</h3>

                @if (Users != null && Users.Any())
                {
                    <table class="table table-bordered">
                        <thead class="thead-light">
                            <tr>
                                <th>User ID</th>
                                <th>First Name</th>
                                <th>Last Name</th>
                                <th>Login</th>
                                <th>Role</th>
                                <th>Phone</th>
                                <th>Email</th>
                                <th>Actions</th>
                            </tr>
                        </thead>
                        <tbody>
                            @foreach (var user in Users)
                            {
                                <tr>
                                    <td>@user.Userid</td>
                                    <td>
                                        @if (user.Userid == EditingUser?.Userid)
                                        {
                                            <input class="form-control" @bind="EditingUser.Firstname" />
                                        }
                                        else
                                        {
                                            @user.Firstname
                                        }
                                    </td>
                                    <td>
                                        @if (user.Userid == EditingUser?.Userid)
                                        {
                                            <input class="form-control" @bind="EditingUser.Lastname" />
                                        }
                                        else
                                        {
                                            @user.Lastname
                                        }
                                    </td>
                                    <td>
                                        @if (user.Userid == EditingUser?.Userid)
                                        {
                                            <input class="form-control" @bind="EditingUser.Login" />
                                        }
                                        else
                                        {
                                            @user.Login
                                        }
                                    </td>
                                    <td>
                                        @if (user.Userid == EditingUser?.Userid)
                                        {
                                            <input class="form-control" @bind="EditingUser.Role" disabled />
                                        }
                                        else
                                        {
                                            @user.Role
                                        }
                                    </td>
                                    <td>
                                        @if (user.Userid == EditingUser?.Userid)
                                        {
                                            <input class="form-control" @bind="EditingUser.Phone" />
                                        }
                                        else
                                        {
                                            @user.Phone
                                        }
                                    </td>
                                    <td>
                                        @if (user.Userid == EditingUser?.Userid)
                                        {
                                            <button class="btn btn-success btn-sm" @onclick="SaveUser">Save</button>
                                            <button class="btn btn-secondary btn-sm" @onclick="CancelEdit">Cancel</button>
                                        }
                                        else
                                        {
                                            <button class="btn btn-primary btn-sm" @onclick="() => StartEditing(user)">Edit</button>
                                            <button class="btn btn-danger btn-sm" @onclick="() => DeleteUser(user.Userid)">Delete</button>
                                        }
                                    </td>
                                </tr>
                            }
                        </tbody>
                    </table>
                }
                else
                {
                    <p class="text-center">No users available.</p>
                }

                <div class="text-center mt-4">
                    <button class="btn btn-primary" @onclick="AddNewUser">Add New User</button>
                </div>
            </div>
        </div>
    </div>
</div>

@code {
    private List<User>? Users { get; set; }
    private User? EditingUser { get; set; }

    protected override async Task OnInitializedAsync()
    {
        await LoadUsersAsync();
    }

    private async Task LoadUsersAsync()
    {
        try
        {
            Users = await UserRepository.GetAllAsync() ?? new List<User>();
        }
        catch (Exception ex)
        {
            Console.Error.WriteLine($"Error loading users: {ex.Message}");
        }
    }

    private void StartEditing(User user)
    {
        EditingUser = new User
        {
            Userid = user.Userid,
            Firstname = user.Firstname,
            Lastname = user.Lastname,
            Role = user.Role,
            Login = user.Login,
            Email = user.Email,
            Phone = user.Phone
        };
    }

    private async Task SaveUser()
    {
        if (EditingUser == null)
        {
            return;
        }

        try
        {
            var existingUser = Users?.FirstOrDefault(u => u.Login == EditingUser.Login);
            if (existingUser != null && existingUser.Userid != EditingUser.Userid)
            {
                Console.Error.WriteLine("Login is already taken.");
                return;
            }

            await UserRepository.UpdateAsync(EditingUser.Userid, EditingUser);
            await LoadUsersAsync();
            EditingUser = null;
        }
        catch (Exception ex)
        {
            Console.Error.WriteLine($"Error saving user: {ex.Message}");
        }
    }

    private void CancelEdit()
    {
        EditingUser = null;
    }

    private async Task DeleteUser(int userid)
    {
        try
        {
            await UserRepository.DeleteAsync(userid);
            await LoadUsersAsync();
        }
        catch (Exception ex)
        {
            Console.Error.WriteLine($"Error deleting user: {ex.Message}");
        }
    }

    private async Task AddNewUser()
    {
        int newLogin = (Users?.Max(u => u.Userid) ?? 0) + 1;

        var newUser = new User
        {
            Firstname = "New",
            Lastname = "User",
            Role = "Admin",  
            Login = $"New{newLogin.ToString()}",  
            Email = "new.user@example.com",
            Phone = null
        };

        try
        {
            var existingUser = Users?.FirstOrDefault(u => u.Login == newUser.Login);
            if (existingUser != null)
            {
                Console.Error.WriteLine("Login is already taken.");
                return;
            }

            await UserRepository.CreateAsync(newUser);
            await LoadUsersAsync();
        }
        catch (Exception ex)
        {
            Console.Error.WriteLine($"Error adding user: {ex.Message}");
        }
    }
}