@page "/vehicles"
@inject IRepository<Vehicle> VehicleRepository

<div class="vehicles-page">
    <header class="text-center">
        <h1 class="display-4">ðŸš› Vehicle Management</h1>
        <p class="lead">Manage your fleet of vehicles effectively.</p>
        <hr class="my-4">
    </header>

    <div class="container">
        <div class="row">
            <div class="col-md-12">
                <h3 class="text-center mb-4">Vehicle List</h3>

                @if (Vehicles != null && Vehicles.Any())
                {
                    <table class="table table-bordered">
                        <thead class="thead-light">
                            <tr>
                                <th>Vehicle ID</th>
                                <th>Number</th>
                                <th>Type</th>
                                <th>Load Capacity</th>
                                <th>Volume</th>
                                <th>Status</th>
                                <th>Actions</th>
                            </tr>
                        </thead>
                        <tbody>
                            @foreach (var vehicle in Vehicles)
                            {
                                <tr>
                                    <td>@vehicle.VehicleId</td>
                                    <td>
                                        @if (vehicle.VehicleId == EditingVehicle?.VehicleId)
                                        {
                                            <input class="form-control" @bind="EditingVehicle.VehicleNumber" />
                                        }
                                        else
                                        {
                                            @vehicle.VehicleNumber
                                        }
                                    </td>
                                    <td>
                                        @if (vehicle.VehicleId == EditingVehicle?.VehicleId)
                                        {
                                            <input class="form-control" @bind="EditingVehicle.VehicleType" />
                                        }
                                        else
                                        {
                                            @vehicle.VehicleType
                                        }
                                    </td>
                                    <td>
                                        @if (vehicle.VehicleId == EditingVehicle?.VehicleId)
                                        {
                                            <input class="form-control" type="number" @bind="EditingVehicle.LoadCapacity" />
                                        }
                                        else
                                        {
                                            @vehicle.LoadCapacity
                                        }
                                    </td>
                                    <td>
                                        @if (vehicle.VehicleId == EditingVehicle?.VehicleId)
                                        {
                                            <input class="form-control" type="number" @bind="EditingVehicle.Volume" />
                                        }
                                        else
                                        {
                                            @vehicle.Volume
                                        }
                                    </td>
                                    <td>
                                        @if (vehicle.VehicleId == EditingVehicle?.VehicleId)
                                        {
                                            <input class="form-control" @bind="EditingVehicle.Status" />
                                        }
                                        else
                                        {
                                            @vehicle.Status
                                        }
                                    </td>
                                    <td>
                                        @if (vehicle.VehicleId == EditingVehicle?.VehicleId)
                                        {
                                            <button class="btn btn-success btn-sm" @onclick="SaveVehicle">Save</button>
                                            <button class="btn btn-secondary btn-sm" @onclick="CancelEdit">Cancel</button>
                                        }
                                        else
                                        {
                                            <button class="btn btn-primary btn-sm" @onclick="() => StartEditing(vehicle)">Edit</button>
                                            <button class="btn btn-danger btn-sm" @onclick="() => DeleteVehicle(vehicle.VehicleId)">Delete</button>
                                        }
                                    </td>
                                </tr>
                            }
                        </tbody>
                    </table>
                }
                else
                {
                    <p class="text-center">No vehicles available.</p>
                }

                <div class="text-center mt-4">
                    <button class="btn btn-primary" @onclick="AddNewVehicle">Add New Vehicle</button>
                </div>
            </div>
        </div>
    </div>
</div>

@code {
    private List<Vehicle>? Vehicles { get; set; }
    private Vehicle? EditingVehicle { get; set; }

    protected override async Task OnInitializedAsync()
    {
        await LoadVehiclesAsync();
    }

    private async Task LoadVehiclesAsync()
    {
        try
        {
            Vehicles = await VehicleRepository.GetAllAsync() ?? new List<Vehicle>();
        }
        catch (Exception ex)
        {
            Console.Error.WriteLine($"Error loading vehicles: {ex.Message}");
        }
    }

    private void StartEditing(Vehicle vehicle)
    {
        EditingVehicle = new Vehicle
        {
            VehicleId = vehicle.VehicleId,
            VehicleNumber = vehicle.VehicleNumber,
            VehicleType = vehicle.VehicleType,
            LoadCapacity = vehicle.LoadCapacity,
            Volume = vehicle.Volume,
            Status = vehicle.Status
        };
    }

    private async Task SaveVehicle()
    {
        if (EditingVehicle == null)
        {
            return;
        }

        try
        {
            await VehicleRepository.UpdateAsync(EditingVehicle.VehicleId, EditingVehicle);
            await LoadVehiclesAsync();
            EditingVehicle = null;
        }
        catch (Exception ex)
        {
            Console.Error.WriteLine($"Error saving vehicle: {ex.Message}");
        }
    }

    private void CancelEdit()
    {
        EditingVehicle = null;
    }

    private async Task DeleteVehicle(int vehicleId)
    {
        try
        {
            await VehicleRepository.DeleteAsync(vehicleId);
            await LoadVehiclesAsync();
        }
        catch (Exception ex)
        {
            Console.Error.WriteLine($"Error deleting vehicle: {ex.Message}");
        }
    }

    private async Task AddNewVehicle()
    {
        var newVehicle = new Vehicle
        {
            VehicleNumber = $"New Vehicle{Vehicles?.Max(v => v.VehicleId) + 1}",
            VehicleType = "Truck",
            LoadCapacity = 0,
            Volume = null,
            Status = "On Trip"
        };

        try
        {
            await VehicleRepository.CreateAsync(newVehicle);
            await LoadVehiclesAsync();
        }
        catch (Exception ex)
        {
            Console.Error.WriteLine($"Error adding vehicle: {ex.Message}");
        }
    }
}