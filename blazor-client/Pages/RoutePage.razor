@page "/routes"
@inject IRepository<Route> RouteRepository

<div class="routes-page">
    <header class="text-center">
        <h1 class="display-4">ðŸš› Route Management</h1>
        <p class="lead">Manage transportation routes effectively.</p>
        <hr class="my-4">
    </header>

    <div class="container">
        <div class="row">
            <div class="col-md-12">
                <h3 class="text-center mb-4">Route List</h3>

                @if (Routes != null && Routes.Any())
                {
                    <table class="table table-bordered">
                        <thead class="thead-light">
                            <tr>
                                <th>Route ID</th>
                                <th>Start Point</th>
                                <th>End Point</th>
                                <th>Intermediate Points</th>
                                <th>Distance</th>
                                <th>Description</th>
                                <th>Actions</th>
                            </tr>
                        </thead>
                        <tbody>
                            @foreach (var route in Routes)
                            {
                                <tr>
                                    <td>@route.RouteId</td>
                                    <td>
                                        @if (route.RouteId == EditingRoute?.RouteId)
                                        {
                                            <input class="form-control" @bind="EditingRoute.StartPoint" />
                                        }
                                        else
                                        {
                                            @route.StartPoint
                                        }
                                    </td>
                                    <td>
                                        @if (route.RouteId == EditingRoute?.RouteId)
                                        {
                                            <input class="form-control" @bind="EditingRoute.EndPoint" />
                                        }
                                        else
                                        {
                                            @route.EndPoint
                                        }
                                    </td>
                                    <td>
                                        @if (route.RouteId == EditingRoute?.RouteId)
                                        {
                                            <input class="form-control" @bind="EditingRoute.IntermediatePoints" />
                                        }
                                        else
                                        {
                                            @route.IntermediatePoints
                                        }
                                    </td>
                                    <td>
                                        @if (route.RouteId == EditingRoute?.RouteId)
                                        {
                                            <input class="form-control" type="number" @bind="EditingRoute.Distance" />
                                        }
                                        else
                                        {
                                            @route.Distance
                                        }
                                    </td>
                                    <td>
                                        @if (route.RouteId == EditingRoute?.RouteId)
                                        {
                                            <textarea class="form-control" @bind="EditingRoute.Description"></textarea>
                                        }
                                        else
                                        {
                                            @route.Description
                                        }
                                    </td>
                                    <td>
                                        @if (route.RouteId == EditingRoute?.RouteId)
                                        {
                                            <button class="btn btn-success btn-sm" @onclick="SaveRoute">Save</button>
                                            <button class="btn btn-secondary btn-sm" @onclick="CancelEdit">Cancel</button>
                                        }
                                        else
                                        {
                                            <button class="btn btn-primary btn-sm" @onclick="() => StartEditing(route)">Edit</button>
                                            <button class="btn btn-danger btn-sm" @onclick="() => DeleteRoute(route.RouteId)">Delete</button>
                                        }
                                    </td>
                                </tr>
                            }
                        </tbody>
                    </table>
                }
                else
                {
                    <p class="text-center">No routes available.</p>
                }

                <div class="text-center mt-4">
                    <button class="btn btn-primary" @onclick="AddNewRoute">Add New Route</button>
                </div>
            </div>
        </div>
    </div>
</div>

@code {
    private List<Route>? Routes { get; set; }
    private Route? EditingRoute { get; set; }

    protected override async Task OnInitializedAsync()
    {
        await LoadRoutesAsync();
    }

    private async Task LoadRoutesAsync()
    {
        try
        {
            Routes = await RouteRepository.GetAllAsync() ?? new List<Route>();
        }
        catch (Exception ex)
        {
            Console.Error.WriteLine($"Error loading routes: {ex.Message}");
        }
    }

    private void StartEditing(Route route)
    {
        EditingRoute = new Route
        {
            RouteId = route.RouteId,
            StartPoint = route.StartPoint,
            EndPoint = route.EndPoint,
            IntermediatePoints = route.IntermediatePoints,
            Distance = route.Distance,
            Description = route.Description
        };
    }

    private async Task SaveRoute()
    {
        if (EditingRoute == null)
        {
            return;
        }

        try
        {
            await RouteRepository.UpdateAsync(EditingRoute.RouteId, EditingRoute);
            await LoadRoutesAsync();
            EditingRoute = null;
        }
        catch (Exception ex)
        {
            Console.Error.WriteLine($"Error saving route: {ex.Message}");
        }
    }

    private void CancelEdit()
    {
        EditingRoute = null;
    }

    private async Task DeleteRoute(int routeId)
    {
        try
        {
            await RouteRepository.DeleteAsync(routeId);
            LoadRoutesAsync();
        }
        catch (Exception ex)
        {
            Console.Error.WriteLine($"Error deleting route: {ex.Message}");
        }
    }

    private async Task AddNewRoute()
    {
        var newRoute = new Route
        {
            StartPoint = "New Start",
            EndPoint = "New End",
            Distance = 0,
            IntermediatePoints = null,
            Description = "New Route"
        };

        try
        {
            await RouteRepository.CreateAsync(newRoute);
            await LoadRoutesAsync();
        }
        catch (Exception ex)
        {
            Console.Error.WriteLine($"Error adding route: {ex.Message}");
        }
    }
}
